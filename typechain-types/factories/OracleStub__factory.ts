/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { OracleStub, OracleStubInterface } from "../OracleStub";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    name: "ProofVerified",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "metadataHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "result",
        type: "bool",
      },
    ],
    name: "ProofVerifiedWithHash",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "VerificationToggled",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
    ],
    name: "setVerificationEnabled",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "verificationEnabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "metadataHash",
        type: "bytes32",
      },
    ],
    name: "verifyProofWithHash",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506000805460ff60a01b1933166001600160a81b031990911617600160a01b17905561050e806100416000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80634737a2501461006757806355c265fe1461007c5780637ad2caa6146100a45780638da5cb5b146100b7578063c9dbabe9146100e2578063f2fde38b146100f6575b600080fd5b61007a6100753660046102f1565b610109565b005b61008f61008a366004610363565b610194565b60405190151581526020015b60405180910390f35b61008f6100b23660046103a5565b6101e7565b6000546100ca906001600160a01b031681565b6040516001600160a01b03909116815260200161009b565b60005461008f90600160a01b900460ff1681565b61007a6101043660046103f1565b61023d565b6000546001600160a01b0316331461013c5760405162461bcd60e51b81526004016101339061041a565b60405180910390fd5b60008054821515600160a01b0260ff60a01b199091161790556040517fb625e49bd9d35aadbd7a6bb5bbcea73a9bc1b7097d570453068f9270feda203a9061018990831515815260200190565b60405180910390a150565b60008054604051600160a01b90910460ff16907fef4d9945a3935e9164a67c12bf96e7a4d91f4e33247ef25df74b4cf63be706f2906101d890869086908590610486565b60405180910390a19392505050565b60008054604051600160a01b90910460ff16907f970b0ed70aff085abaa1ffa8d3cfe4c326eaebd4241bfd8131b95eaa2309291c9061022d9087908790879086906104ac565b60405180910390a1949350505050565b6000546001600160a01b031633146102675760405162461bcd60e51b81526004016101339061041a565b6001600160a01b0381166102cf5760405162461bcd60e51b815260206004820152602960248201527f4f7261636c65537475623a206e6577206f776e657220697320746865207a65726044820152686f206164647265737360b81b6064820152608401610133565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60006020828403121561030357600080fd5b8135801515811461031357600080fd5b9392505050565b60008083601f84011261032c57600080fd5b50813567ffffffffffffffff81111561034457600080fd5b60208301915083602082850101111561035c57600080fd5b9250929050565b6000806020838503121561037657600080fd5b823567ffffffffffffffff81111561038d57600080fd5b6103998582860161031a565b90969095509350505050565b6000806000604084860312156103ba57600080fd5b833567ffffffffffffffff8111156103d157600080fd5b6103dd8682870161031a565b909790965060209590950135949350505050565b60006020828403121561040357600080fd5b81356001600160a01b038116811461031357600080fd5b60208082526023908201527f4f7261636c65537475623a2063616c6c6572206973206e6f7420746865206f776040820152623732b960e91b606082015260800190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152600061049a60408301858761045d565b90508215156020830152949350505050565b6060815260006104c060608301868861045d565b6020830194909452509015156040909101529291505056fea2646970667358221220cc1dcd99969bb528bcc9c02ad0ff1f6bfe3b9ff851cd18b580af96f97a929b8f64736f6c63430008180033";

type OracleStubConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleStubConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OracleStub__factory extends ContractFactory {
  constructor(...args: OracleStubConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OracleStub & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): OracleStub__factory {
    return super.connect(runner) as OracleStub__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleStubInterface {
    return new Interface(_abi) as OracleStubInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): OracleStub {
    return new Contract(address, _abi, runner) as unknown as OracleStub;
  }
}
