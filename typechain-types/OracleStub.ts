/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface OracleStubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "owner"
      | "setVerificationEnabled"
      | "transferOwnership"
      | "verificationEnabled"
      | "verifyProof"
      | "verifyProofWithHash"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ProofVerified"
      | "ProofVerifiedWithHash"
      | "VerificationToggled"
  ): EventFragment;

  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setVerificationEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProofWithHash",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVerificationEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verificationEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProofWithHash",
    data: BytesLike
  ): Result;
}

export namespace ProofVerifiedEvent {
  export type InputTuple = [proof: BytesLike, result: boolean];
  export type OutputTuple = [proof: string, result: boolean];
  export interface OutputObject {
    proof: string;
    result: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProofVerifiedWithHashEvent {
  export type InputTuple = [
    proof: BytesLike,
    metadataHash: BytesLike,
    result: boolean
  ];
  export type OutputTuple = [
    proof: string,
    metadataHash: string,
    result: boolean
  ];
  export interface OutputObject {
    proof: string;
    metadataHash: string;
    result: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationToggledEvent {
  export type InputTuple = [enabled: boolean];
  export type OutputTuple = [enabled: boolean];
  export interface OutputObject {
    enabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OracleStub extends BaseContract {
  connect(runner?: ContractRunner | null): OracleStub;
  waitForDeployment(): Promise<this>;

  interface: OracleStubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  owner: TypedContractMethod<[], [string], "view">;

  setVerificationEnabled: TypedContractMethod<
    [enabled: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  verificationEnabled: TypedContractMethod<[], [boolean], "view">;

  verifyProof: TypedContractMethod<[proof: BytesLike], [boolean], "nonpayable">;

  verifyProofWithHash: TypedContractMethod<
    [proof: BytesLike, metadataHash: BytesLike],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setVerificationEnabled"
  ): TypedContractMethod<[enabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verificationEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifyProof"
  ): TypedContractMethod<[proof: BytesLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyProofWithHash"
  ): TypedContractMethod<
    [proof: BytesLike, metadataHash: BytesLike],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "ProofVerified"
  ): TypedContractEvent<
    ProofVerifiedEvent.InputTuple,
    ProofVerifiedEvent.OutputTuple,
    ProofVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "ProofVerifiedWithHash"
  ): TypedContractEvent<
    ProofVerifiedWithHashEvent.InputTuple,
    ProofVerifiedWithHashEvent.OutputTuple,
    ProofVerifiedWithHashEvent.OutputObject
  >;
  getEvent(
    key: "VerificationToggled"
  ): TypedContractEvent<
    VerificationToggledEvent.InputTuple,
    VerificationToggledEvent.OutputTuple,
    VerificationToggledEvent.OutputObject
  >;

  filters: {
    "ProofVerified(bytes,bool)": TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;
    ProofVerified: TypedContractEvent<
      ProofVerifiedEvent.InputTuple,
      ProofVerifiedEvent.OutputTuple,
      ProofVerifiedEvent.OutputObject
    >;

    "ProofVerifiedWithHash(bytes,bytes32,bool)": TypedContractEvent<
      ProofVerifiedWithHashEvent.InputTuple,
      ProofVerifiedWithHashEvent.OutputTuple,
      ProofVerifiedWithHashEvent.OutputObject
    >;
    ProofVerifiedWithHash: TypedContractEvent<
      ProofVerifiedWithHashEvent.InputTuple,
      ProofVerifiedWithHashEvent.OutputTuple,
      ProofVerifiedWithHashEvent.OutputObject
    >;

    "VerificationToggled(bool)": TypedContractEvent<
      VerificationToggledEvent.InputTuple,
      VerificationToggledEvent.OutputTuple,
      VerificationToggledEvent.OutputObject
    >;
    VerificationToggled: TypedContractEvent<
      VerificationToggledEvent.InputTuple,
      VerificationToggledEvent.OutputTuple,
      VerificationToggledEvent.OutputObject
    >;
  };
}
