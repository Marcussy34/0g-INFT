/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface DataVerifierAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_verifyWithHash"
      | "getOracleAddress"
      | "oracle"
      | "verifyOwnership"
      | "verifyTransferValidity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipVerified" | "TransferValidityVerified"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_verifyWithHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyOwnership",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTransferValidity",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "_verifyWithHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyTransferValidity",
    data: BytesLike
  ): Result;
}

export namespace OwnershipVerifiedEvent {
  export type InputTuple = [dataHash: BytesLike, result: boolean];
  export type OutputTuple = [dataHash: string, result: boolean];
  export interface OutputObject {
    dataHash: string;
    result: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferValidityVerifiedEvent {
  export type InputTuple = [dataHash: BytesLike, result: boolean];
  export type OutputTuple = [dataHash: string, result: boolean];
  export interface OutputObject {
    dataHash: string;
    result: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DataVerifierAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): DataVerifierAdapter;
  waitForDeployment(): Promise<this>;

  interface: DataVerifierAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _verifyWithHash: TypedContractMethod<
    [data: BytesLike],
    [boolean],
    "nonpayable"
  >;

  getOracleAddress: TypedContractMethod<[], [string], "view">;

  oracle: TypedContractMethod<[], [string], "view">;

  verifyOwnership: TypedContractMethod<
    [data: BytesLike],
    [boolean],
    "nonpayable"
  >;

  verifyTransferValidity: TypedContractMethod<
    [data: BytesLike],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_verifyWithHash"
  ): TypedContractMethod<[data: BytesLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getOracleAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifyOwnership"
  ): TypedContractMethod<[data: BytesLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyTransferValidity"
  ): TypedContractMethod<[data: BytesLike], [boolean], "nonpayable">;

  getEvent(
    key: "OwnershipVerified"
  ): TypedContractEvent<
    OwnershipVerifiedEvent.InputTuple,
    OwnershipVerifiedEvent.OutputTuple,
    OwnershipVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "TransferValidityVerified"
  ): TypedContractEvent<
    TransferValidityVerifiedEvent.InputTuple,
    TransferValidityVerifiedEvent.OutputTuple,
    TransferValidityVerifiedEvent.OutputObject
  >;

  filters: {
    "OwnershipVerified(bytes32,bool)": TypedContractEvent<
      OwnershipVerifiedEvent.InputTuple,
      OwnershipVerifiedEvent.OutputTuple,
      OwnershipVerifiedEvent.OutputObject
    >;
    OwnershipVerified: TypedContractEvent<
      OwnershipVerifiedEvent.InputTuple,
      OwnershipVerifiedEvent.OutputTuple,
      OwnershipVerifiedEvent.OutputObject
    >;

    "TransferValidityVerified(bytes32,bool)": TypedContractEvent<
      TransferValidityVerifiedEvent.InputTuple,
      TransferValidityVerifiedEvent.OutputTuple,
      TransferValidityVerifiedEvent.OutputObject
    >;
    TransferValidityVerified: TypedContractEvent<
      TransferValidityVerifiedEvent.InputTuple,
      TransferValidityVerifiedEvent.OutputTuple,
      TransferValidityVerifiedEvent.OutputObject
    >;
  };
}
